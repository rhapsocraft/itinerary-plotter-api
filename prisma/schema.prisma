generator client {
  provider = "prisma-client-js"
  output   = "../src/db/generated/prisma"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../src/db"
  fileName = "types.d.ts"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/db/generated/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NativeUser {
  id            String          @id @default(uuid()) @db.VarChar(36)
  displayName   String
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @default(now()) @db.Timestamptz(3)
  File          File[]
  GoogleAccount GoogleAccount[]
  Trip          Trip[]

  @@map("users")
}

model GoogleAccount {
  id          String     @id @default(uuid()) @db.VarChar(36)
  email       String     @unique
  userId      String     @db.VarChar(36)
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @default(now()) @db.Timestamptz(3)
  displayName String     @default("")
  user        NativeUser @relation(fields: [userId], references: [id])

  @@map("google_accounts")
}

model Trip {
  id          String     @id @default(uuid()) @db.VarChar(36)
  displayName String     @default("")
  ownerId     String     @db.VarChar(36)
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @default(now()) @db.Timestamptz(3)
  owner       NativeUser @relation(fields: [ownerId], references: [id])

  @@map("trips")
}

model Activity {
  id          String   @id @default(uuid()) @db.VarChar(36)
  displayName String   @default("")
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)

  @@map("activities")
}

model Document {
  id                     String                   @id @db.VarChar(36)
  content                String
  createdAt              DateTime                 @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime                 @default(now()) @db.Timestamptz(3)
  DocumentFileReferences DocumentFileReferences[]

  @@map("documents")
}

model DocumentFileReferences {
  documentId String   @db.VarChar(36)
  fileId     String   @db.VarChar(36)
  document   Document @relation(fields: [documentId], references: [id])
  file       File     @relation(fields: [fileId], references: [id])

  @@id([documentId, fileId])
  @@map("document_file_ref")
}

model File {
  id                     String                   @id @default(uuid()) @db.VarChar(36)
  name                   String                   @unique
  displayName            String
  encoding               String
  src                    String
  type                   String
  size                   Int
  uploaderId             String                   @db.VarChar(36)
  createdAt              DateTime                 @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime                 @default(now()) @db.Timestamptz(3)
  DocumentFileReferences DocumentFileReferences[]
  uploader               NativeUser               @relation(fields: [uploaderId], references: [id])

  @@map("files")
}

model user_sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}
