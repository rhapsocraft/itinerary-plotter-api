// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output   = "../src/db"
  fileName = "types.d.ts"
}

model NativeUser {
  id            String          @id @db.VarChar(36) // UUID Length
  displayName   String
  GoogleAccount GoogleAccount[]
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @db.Timestamptz(3)
  Trip          Trip[]
  File          File[]

  @@map("users")
}

model GoogleAccount {
  id          String     @id @db.VarChar(21) // Google Id Length
  displayName String     @default("")
  email       String     @unique
  userId      String     @db.VarChar(36)
  user        NativeUser @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @db.Timestamptz(3)

  @@map("google_accounts")
}

model Trip {
  id            String          @id @db.VarChar(36)
  displayName   String
  ownerId       String          @db.VarChar(36)
  owner         NativeUser      @relation(fields: [ownerId], references: [id])
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @db.Timestamptz(3)
  TripDocuments TripDocuments[]

  @@map("trips")
}

model Activity {
  id                String              @id @db.VarChar(36)
  displayName       String
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime            @db.Timestamptz(3)
  ActivityDocuments ActivityDocuments[]

  @@map("activities")
}

model Document {
  id                     String                   @id @db.VarChar(36)
  content                String
  createdAt              DateTime                 @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime                 @db.Timestamptz(3)
  DocumentFileReferences DocumentFileReferences[]
  TripDocuments          TripDocuments[]
  ActivityDocuments      ActivityDocuments[]

  @@map("documents")
}

model ActivityDocuments {
  documentId String @db.VarChar(36)
  activityId String @db.VarChar(36)

  trip     Activity @relation(fields: [activityId], references: [id])
  document Document @relation(fields: [documentId], references: [id])

  @@id([documentId, activityId])
  @@map("activity_documents")
}

model TripDocuments {
  documentId String @db.VarChar(36)
  tripId     String @db.VarChar(36)

  trip     Trip     @relation(fields: [tripId], references: [id])
  document Document @relation(fields: [documentId], references: [id])

  @@id([documentId, tripId])
  @@map("trip_documents")
}

model DocumentFileReferences {
  documentId String   @db.VarChar(36)
  document   Document @relation(fields: [documentId], references: [id])
  fileId     String   @db.VarChar(36)
  file       File     @relation(fields: [fileId], references: [id])

  @@id([documentId, fileId])
  @@map("document_file_ref")
}

model File {
  id                     String                   @id @db.VarChar(36)
  data                   String
  type                   String
  uploaderId             String                   @db.VarChar(36)
  uploader               NativeUser               @relation(fields: [uploaderId], references: [id])
  createdAt              DateTime                 @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime                 @db.Timestamptz(3)
  DocumentFileReferences DocumentFileReferences[]

  @@map("files")
}
